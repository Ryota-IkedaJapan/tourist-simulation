# -*- coding: utf-8 -*-
"""シミュレーション池田 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nielbmSN2nP2iblXwlNK2xckDb9LNyJO

マルコフ連鎖で訪日客数をシミュレーション
"""

import random
import statistics
def build_population_chain():
    chain = {
        1: {1: 0.4, 2: 0.3, 3: 0.2, 4: 0.05, 5: 0.05},
        2: {1: 0.3, 2: 0.4, 3: 0.2, 4: 0.05, 5: 0.05},
        3: {1: 0.05, 2: 0.2, 3: 0.5, 4: 0.2, 5: 0.05},
        4: {1: 0.05, 2: 0.05, 3: 0.2, 4: 0.4, 5: 0.3},
        5: {1: 0.05, 2: 0.05, 3: 0.3, 4: 0.4, 5: 0.2}
    }
    return chain

def generate_population_sequence(chain, initial_state, length=365):
    current_population = initial_state
    generated_sequence = [current_population]

    for _ in range(length - 1):
        next_weather = random.choices(list(chain[current_population].keys()),k=1,weights=list(chain[current_population].values()))[0]
        generated_sequence.append(next_weather)
        current_weather = next_weather

    return generated_sequence

"""マルコフ連鎖30回分"""

sequences = []
# マルコフ連鎖の構築
population_chain = build_population_chain()
for _ in range(30):
    initial_state = random.randint(1, 5)  # 初期状態をランダムに選択
    generated_sequence = generate_population_sequence(population_chain, initial_state, length=365)
    sequences.append(generated_sequence)

# 生成された30個の人口推移を表示
for index, sequence in enumerate(sequences, start=1):
    print(f"Generated Sequence {index}: {' '.join(map(str, sequence))}")

"""価格変動ありのシミュレーション"""

def simulate_arrivals():
    num_days = 365
    base_arrivals = 10000
    a_coin = 1.0
    b_coin = 1.0
    A_stayer_sum = [10000]
    B_stayer_sum = [0]
    coin_results=[]

    for day in range(num_days):

        k_rate = generated_sequence[day]
        if k_rate == 1:
            fact_arrivals = base_arrivals * 0.8
        elif k_rate == 2:
            fact_arrivals = base_arrivals * 0.9
        elif k_rate == 3:
            fact_arrivals = base_arrivals * 1.0
        elif k_rate == 4:
            fact_arrivals = base_arrivals * 1.1
        elif k_rate == 5:
            fact_arrivals = base_arrivals * 1.2

        if A_stayer_sum[day] > 10000:
            c_over = (A_stayer_sum[day] - 10000) / 10000
            a_coin *= 1
            b_coin *= (1 + (c_over)/5)
        else:
            a_coin *= 1
            b_coin *= 1
        r = b_coin / a_coin
        coin_results.append(r)

        if 1.0 < r <= 1.25:
            A_stayer = fact_arrivals * 0.9
            B_stayer = fact_arrivals * 0.1
        elif 1.25 < r <= 1.5:
            A_stayer = fact_arrivals * 0.8
            B_stayer = fact_arrivals * 0.2
        elif 1.5 < r <= 1.75:
            A_stayer = fact_arrivals * 0.7
            B_stayer = fact_arrivals * 0.3
        elif r > 1.75:
            A_stayer = fact_arrivals * 0.6
            B_stayer = fact_arrivals * 0.4
        else:
            A_stayer = fact_arrivals
            B_stayer = 0

        A_stayer_sum.append(A_stayer)
        B_stayer_sum.append(B_stayer)
    return sum(A_stayer_sum), statistics.mean(coin_results),A_stayer_sum



"""価格変動ありのシミュレーション30回分"""

#為替変動ありバージョンのシミュレーション
specific_simulation_results=[]
specific_coin_results=[]
for i in range(30):
  generated_sequence=sequences[i]
  total_A_stayers=simulate_arrivals()
  specific_simulation_results.append(total_A_stayers[0])
  specific_coin_results.append(total_A_stayers[1])
for i in specific_simulation_results:
  print(i)
for t in specific_coin_results:
  print(t)
print('平均'+str(statistics.mean(specific_simulation_results)))
print('標準偏差'+str(statistics.pstdev(specific_simulation_results)))
print('為替平均'+str(statistics.mean(specific_coin_results)))

"""通常バージョンのシミュレーション"""

import random

def normal_simulation(base_arrivals=10000):
  num_days=365
  Normal_stayer_sum = [10000]
  for day in range(num_days):
    k_rate = generated_sequence[day]
    if k_rate==1:
        fact_arrivals = base_arrivals * 0.8
    elif k_rate==2:
        fact_arrivals = base_arrivals * 0.9
    elif k_rate==3:
        fact_arrivals = base_arrivals * 1.0
    elif k_rate==4:
        fact_arrivals = base_arrivals * 1.1
    elif k_rate==5:
        fact_arrivals=base_arrivals * 1.2
    Normal_stayer_sum.append(fact_arrivals)
  return sum(Normal_stayer_sum)

"""365日分のグラフ"""

#通常バージョンのシミュレーション
normal_simulation_results=[]
for i in range(30):
  generated_sequence=sequences[i]
  normal_A_stayers=normal_simulation()
  normal_simulation_results.append(normal_A_stayers)

for i in normal_simulation_results:
  print(i)
print('通常平均'+str(statistics.mean(normal_simulation_results)))
print('通常標準偏差'+str(statistics.pstdev(normal_simulation_results)))

"""30回分

人口の違い
"""

from matplotlib import pyplot as plt
x=list(range(1,31))
plt.plot(x, normal_simulation_results, marker = "o", color = "red")
plt.plot(x, specific_simulation_results, marker = "v", color = "blue")
plt.show()

"""為替の動き"""

c=list(range(1,31))
plt.plot(c,specific_coin_results,marker="v",color="blue")
plt.show()"# tourist-simulation" 
